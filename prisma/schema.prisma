generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Recipe {
  id                  String           @id @default(cuid())
  slug                String           @unique
  title               String
  description         String
  cuisine             String?
  prepTime            String
  cookTime            String
  totalTime           String
  servings            Int
  difficulty          Difficulty
  featured            Boolean          @default(false)
  published           Boolean          @default(false)
  heroImage           String?
  heroImageAlt        String?
  authorId            String?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  publishedAt         DateTime?
  ingredientsImage    String?
  ingredientsImageAlt String?
  thumbnailDisplay    ThumbnailDisplay @default(HERO)
  story               String?
  ingredients         Ingredient[]
  instructions        Instruction[]
  nutrition           Nutrition?
  reviews             Review[]
  tips                Tip[]
  tags                Tag[]            @relation("RecipeToTag")

  @@index([slug])
  @@index([featured])
}

model Ingredient {
  id       String  @id @default(cuid())
  amount   String
  unit     String?
  item     String
  notes    String?
  group    String?
  order    Int
  recipeId String
  recipe   Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}

model Instruction {
  id          String  @id @default(cuid())
  step        Int
  title       String?
  description String
  image       String?
  imageAlt    String?
  time        String?
  recipeId    String
  recipe      Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([recipeId, step])
}

model Tip {
  id       String @id @default(cuid())
  content  String
  order    Int
  recipeId String
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}

model Nutrition {
  id       String  @id @default(cuid())
  calories Int
  protein  String
  carbs    String
  fat      String
  fiber    String?
  sugar    String?
  sodium   String?
  recipeId String  @unique
  recipe   Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}

model Tag {
  id      String   @id @default(cuid())
  name    String   @unique
  slug    String   @unique
  recipes Recipe[] @relation("RecipeToTag")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  recipeId  String
  createdAt DateTime @default(now())
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([recipeId])
}

model Vehicle {
  id            String            @id @default(cuid())
  slug          String            @unique
  name          String
  category      String
  heroImage     String?
  gallery       String[]
  story         String[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  modifications Modification[]
  specs         Spec[]
  blogPosts     VehicleBlogPost[]
  VehicleUpdate VehicleUpdate[]
}

model Modification {
  id        String   @id @default(cuid())
  category  String
  items     String[]
  order     Int      @default(0)
  vehicleId String
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
}

model Spec {
  id        String  @id @default(cuid())
  label     String
  value     String
  order     Int     @default(0)
  vehicleId String
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
}

model VehicleBlogPost {
  id           String       @id @default(cuid())
  slug         String
  title        String
  excerpt      String?
  content      String
  heroImage    String?
  heroImageAlt String?
  published    Boolean      @default(false)
  featured     Boolean      @default(false)
  publishedAt  DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  vehicleId    String
  vehicle      Vehicle      @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  tags         VehicleTag[] @relation("VehicleBlogPostToTag")

  @@unique([vehicleId, slug])
  @@index([slug])
  @@index([vehicleId, published, publishedAt])
}

model VehicleTag {
  id    String            @id @default(cuid())
  name  String            @unique
  slug  String            @unique
  posts VehicleBlogPost[] @relation("VehicleBlogPostToTag")
}

model Project {
  id              String              @id @default(cuid())
  slug            String              @unique
  title           String
  description     String
  longDescription String?
  category        String
  status          String              @default("in-progress")
  featured        Boolean             @default(false)
  published       Boolean             @default(false)
  heroImage       String?
  heroImageAlt    String?
  demoUrl         String?
  githubUrl       String?
  videoUrl        String?
  order           Int                 @default(0)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  publishedAt     DateTime?
  features        ProjectFeature[]
  images          ProjectImage[]
  technologies    ProjectTechnology[]
  updates         ProjectUpdate[]

  @@index([slug])
  @@index([featured])
  @@index([category])
}

model ProjectTechnology {
  id        String  @id @default(cuid())
  name      String
  icon      String?
  category  String?
  order     Int     @default(0)
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model ProjectFeature {
  id          String  @id @default(cuid())
  title       String
  description String
  order       Int     @default(0)
  projectId   String
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model ProjectImage {
  id        String  @id @default(cuid())
  url       String
  alt       String
  caption   String?
  order     Int     @default(0)
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model ProjectUpdate {
  id        String   @id @default(cuid())
  title     String
  content   String
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model PageView {
  id        String   @id @default(cuid())
  path      String
  referrer  String?
  userAgent String?
  ip        String?
  country   String?
  city      String?
  createdAt DateTime @default(now())

  @@index([path, createdAt])
}

model ContentView {
  id          String   @id @default(cuid())
  contentType String
  contentId   String
  slug        String
  referrer    String?
  createdAt   DateTime @default(now())

  @@index([contentType, contentId])
  @@index([slug, createdAt])
}

model VehicleUpdate {
  id        String   @id
  title     String
  content   String
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime
  vehicleId String
  Vehicle   Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
}

enum Difficulty {
  easy
  medium
  hard
}

enum ThumbnailDisplay {
  HERO
  INGREDIENTS
}
